trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: GOOS
    value: linux
  - name: GOARCH
    value: amd64

stages:
- stage: Build
  displayName: 'Build Application'
  jobs:
  - job: Build
    displayName: 'Build Go Application'
    steps:
    - task: GoTool@0
      inputs:
        version: '1.23.4'
      displayName: 'Install Go'

    - script: |
        go mod download
        go mod verify
      displayName: 'Download dependencies'
      workingDirectory: '$(System.DefaultWorkingDirectory)'

    - script: |
        go build -o webapp webapp.go
      displayName: 'Build webapp'
      workingDirectory: '$(System.DefaultWorkingDirectory)'

    - script: |
        go test ./...
      displayName: 'Run tests'
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      continueOnError: true

    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        command: 'build'
        Dockerfile: 'Dockerfile'
        tags: |
          $(Build.Repository.Name):$(Build.BuildId)
          $(Build.Repository.Name):latest

    - task: Docker@2
      displayName: 'Push Docker image'
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(Build.Repository.Name)'
        command: 'push'
        tags: |
          $(Build.BuildId)
          latest
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

- stage: Deploy
  displayName: 'Deploy to Azure'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    displayName: 'Deploy to Azure Container Instances'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureContainerInstances@0
            displayName: 'Deploy to Azure Container Instances'
            inputs:
              azureSubscription: '$(azureSubscription)'
              resourceGroupName: 'romplin_Resource_Group'
              location: 'East US'
              containerInstanceName: 'recipe-extractor'
              imageSource: 'ContainerRegistry'
              azureContainerRegistry: '$(containerRegistry)'
              imageName: '$(Build.Repository.Name):$(Build.BuildId)'
              containerName: 'recipe-app'
              ports: '8080'
              environmentVariables: |
                PORT 8080
              restartPolicy: 'Always'